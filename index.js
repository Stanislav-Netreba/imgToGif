require('dotenv').config();
const { Client, GatewayIntentBits, Partials } = require('discord.js');
const Jimp = require('jimp');
const GIFEncoder = require('gifencoder');
const fs = require('fs');
const https = require('https');
const path = require('path');
const ffmpeg = require('fluent-ffmpeg'); // –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –≤ gif

const client = new Client({
	intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
	partials: [Partials.Message, Partials.Channel],
});

client.on('ready', () => {
	console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ https
function downloadFile(url, dest) {
	return new Promise((resolve, reject) => {
		const file = fs.createWriteStream(dest);
		https
			.get(url, (response) => {
				response.pipe(file);
				file.on('finish', () => {
					file.close(resolve);
				});
			})
			.on('error', (err) => {
				fs.unlink(dest, () => reject(err));
			});
	});
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –≤ GIF
function convertVideoToGif(videoPath, gifPath) {
	return new Promise((resolve, reject) => {
		ffmpeg(videoPath)
			.output(gifPath)
			.outputOptions('-vf', 'fps=10,scale=320:-1:flags=lanczos')
			.on('end', resolve)
			.on('error', reject)
			.run();
	});
}

client.on('messageCreate', async (message) => {
	console.log('üì© New message received:', message.content);

	// –Ø–∫—â–æ —Ü–µ –±–æ—Ç –∞–±–æ –Ω–µ–º–∞—î reference (–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ) ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
	if (message.author.bot || !message.reference) {
		// console.log('‚õî Ignored (bot or no reply)');
		return;
	}

	// –ú–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É "–ø–æ—Ä–Ω–æ!" –≤ –Ω–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
	if (message.content.toLowerCase() !== '–ø–æ—Ä–Ω–æ!') {
		// console.log('‚ùå Message is not the expected command.');
		return;
	}

	const originalMessage = await message.fetchReference();

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –≤–∫–ª–∞–¥–µ–Ω–Ω—è
	if (!originalMessage.attachments.size) {
		console.log('‚ùó No attachments in replied message.');
		await message.reply('–¢–∏ –º–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.');
		return;
	}

	// –õ–æ–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è
	const attachment = originalMessage.attachments.first();
	const url = attachment.url;
	console.log('üîó Attachment URL:', url);

	const cleanUrl = url.split('?')[0];
	const ext = path.extname(cleanUrl).toLowerCase();
	console.log('üß© File extension:', ext);

	if (!['.png', '.jpg', '.jpeg'].includes(ext)) {
		console.log('‚ö†Ô∏è Unsupported file type.');
		await message.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ PNG, JPG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.');
		return;
	}

	let tempFiles = [];
	console.log('üöÄ Starting file conversion...');

	const sentMessage = await message.reply('–ü—Ä–æ—Ü–µ—Å –ø—ñ—à–æ–≤, —è–∫—â–æ –∫–æ–º–ø –∑–≥–æ—Ä–∏—Ç—å –±—É–¥—É –ø–ª–∞–∫–∞—Ç—å');
	await message.channel.sendTyping(); // –±–æ—Ç –ø–æ–∫–∞–∂–µ "–¥—Ä—É–∫—É—î" –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏

	try {
		if (['.png', '.jpg', '.jpeg'].includes(ext)) {
			console.log('üñºÔ∏è Converting image to GIF...');
			const image = await Jimp.read(url);
			const width = image.bitmap.width;
			const height = image.bitmap.height;

			const encoder = new GIFEncoder(width, height);
			const filePath = `./temp_${Date.now()}.gif`;
			tempFiles.push(filePath);

			const writeStream = fs.createWriteStream(filePath);
			encoder.createReadStream().pipe(writeStream);

			encoder.start();
			encoder.setRepeat(0); // –±–µ–∑–∫—ñ–Ω–µ—á–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
			encoder.setDelay(500); // 500 –º—Å –º—ñ–∂ –∫–∞–¥—Ä–∞–º–∏
			encoder.setQuality(10);

			for (let i = 0; i < 5; i++) {
				encoder.addFrame(image.bitmap.data);
			}

			encoder.finish();

			await new Promise((resolve, reject) => {
				writeStream.on('finish', resolve);
				writeStream.on('error', reject);
			});

			console.log('‚úÖ Image to GIF conversion finished.');
			await message.reply({ files: [filePath] });
		} else {
			await message.reply('–ü–æ–∫–∏ —â–æ —Ü–µ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
			/*
			console.log('üé• Converting video to GIF...');
			const videoPath = `./temp_${Date.now()}.mp4`;
			tempFiles.push(videoPath);

			await downloadFile(url, videoPath);

			const gifPath = `./temp_${Date.now()}.gif`;
			tempFiles.push(gifPath);

			await convertVideoToGif(videoPath, gifPath);

			console.log('‚úÖ Video to GIF conversion finished.');
			await message.reply({ files: [gifPath] });*/
		}

		// –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ø—Ä–æ—Ü–µ—Å –ø—ñ—à–æ–≤..."
		await sentMessage.delete();
	} catch (err) {
		console.error('üî• Error during conversion:', err);
		await message.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.');
	} finally {
		// –ß–∏—Å—Ç–∏–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
		console.log('üßπ Cleaning up temporary files...');
		for (const file of tempFiles) {
			try {
				if (fs.existsSync(file)) {
					console.log('üóëÔ∏è Deleting:', file);
					fs.unlinkSync(file);
				}
			} catch (err) {
				console.error('‚ùó Error deleting file:', file, err);
			}
		}
	}
});

client.login(process.env.DISCORD_TOKEN);
